/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules;

import org.eclipse.egit.github.core.Comment;
import org.eclipse.egit.github.core.Issue;
import org.eclipse.egit.github.core.IssueEvent;
import org.eclipse.egit.github.core.User;
import org.eclipse.egit.github.core.client.GitHubClient;
import org.eclipse.egit.github.core.service.IssueService;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.display.Password;
import org.mule.api.annotations.display.Placement;
import org.mule.api.annotations.param.Optional;

import java.io.IOException;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Generic module
 *
 * @author MuleSoft, Inc.
 */
@Module(name = "github", schemaVersion = "1.0")
public class GitHubModule {

    private static final String BASE_URL = "api.github.com";

    /**
     * The user name
     */
    @Configurable
    @Placement(order = 1)
    private String user;
    /**
     * The password
     */
    @Configurable
    @Placement(order = 2)
    @Password
    private String password;

    private IssueService createIssueService() {
        GitHubClient client = new GitHubClient(BASE_URL);
        client.setCredentials(user, password);
        return new IssueService(client);
    }

    /**
     * Get a list of {@link Issue} objects that match the specified filter data
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param filterData data to filter issues, if non is specified all issues will be returned
     * @return list of {@link Issue}
     * @throws java.io.IOException
     * @
     */
    @Processor
    public List<Issue> getIssues(@Optional String user, String repository, @Optional Map<String, String> filterData) throws IOException {
        if (filterData == null) {
            filterData = Collections.emptyMap();
        }
        return createIssueService().getIssues(getUser(user), repository, filterData);
    }

    /**
     * Custom processor
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repository name
     * @param minutes    minutes
     * @return a list of {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public List<Issue> getIssuesCretedAfter(@Optional String user, String repository, int minutes) throws IOException {
        List<Issue> issues = createIssueService().getIssues(getUser(user), repository, Collections.<String, String>emptyMap());
        Iterator<Issue> iterator = issues.iterator();
        Date since = new Date(System.currentTimeMillis() - minutes * 60 * 1000);
        while (iterator.hasNext()) {
            if (since.after(iterator.next().getCreatedAt())) {
                iterator.remove();
            }
        }
        return issues;
    }

    /**
     * Custom processor
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user            the owner of the repository, leave empty to use {@link this#user}
     * @param repository      the repository name
     * @param fromIssueNumber from issue number
     * @return a list of {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public List<Issue> getIssuesSinceNumber(@Optional String user, String repository, int fromIssueNumber) throws IOException {
        List<Issue> issues = createIssueService().getIssues(getUser(user), repository, Collections.<String, String>emptyMap());
        Iterator<Issue> iterator = issues.iterator();
        while (iterator.hasNext()) {
            if (fromIssueNumber >= iterator.next().getNumber()) {
                iterator.remove();
            }
        }
        return issues;
    }

    /**
     * Creates a GitHub issue
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repository name
     * @param title      the issues's title
     * @param body       the issuess's body
     * @param assignee   optionally specify a asignee for the issue
     * @return the newly created {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public Issue createIssue(@Optional String user, String repository, String title, String body, @Optional String assignee) throws IOException {
        Issue issue = new Issue();
        issue.setTitle(title);
        issue.setBody(body);
        if (assignee != null) {
            User assigneeUser = new User().setName(assignee);
            issue.setAssignee(assigneeUser);
        }
        return createIssueService().createIssue(getUser(user), repository, issue);
    }

    /**
     * Closes a GitHub issue
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repository name
     * @param issueId    the issues's id
     * @return the newly created {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public Issue closeIssue(@Optional String user, String repository, String issueId) throws IOException {
        Issue issue = getIssue(getUser(user), repository, issueId);
        issue.setState("closed");
        return createIssueService().editIssue(getUser(user), repository, issue);
    }

    /**
     * Get the issue represented by the given issueId
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param issueId    the id of the issue
     * @return a {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public Issue getIssue(@Optional String user, String repository, String issueId) throws IOException {
        return createIssueService().getIssue(getUser(user), repository, issueId);
    }

    /**
     * Get an issue's comments
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param issueId    the id of the issue
     * @return a list of {@link Comment}
     * @throws java.io.IOException
     */
    @Processor
    public List<Comment> getComments(@Optional String user, String repository, String issueId) throws IOException {
        return createIssueService().getComments(getUser(user), repository, issueId);
    }

    /**
     * Create comment on specified issue id
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param issueId    the issue id
     * @param comment    the text of the comment
     * @return the created {@link Comment}
     * @throws java.io.IOException
     */
    @Processor
    public Comment createComment(@Optional String user, String repository, String issueId, String comment) throws IOException {
        return createIssueService().createComment(getUser(user), repository, issueId, comment);
    }

    /**
     * Edits the body of the comment represented by the given comment id
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param commentId  the comment id
     * @param body       the new text of the comment
     * @return the created {@link Comment}
     * @throws java.io.IOException
     */
    @Processor
    public Comment editComment(@Optional String user, String repository, Long commentId, String body) throws IOException {
        Comment comment = createIssueService().getComment(getUser(user), repository, commentId);
        comment.setBody(body);
        return createIssueService().editComment(getUser(user), repository, comment);
    }

    /**
     * Delete the issue comment with the given id
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param commentId  the id of the comment to delete
     * @throws java.io.IOException
     */
    @Processor
    public void deleteComment(@Optional String user, String repository, String commentId) throws IOException {
        createIssueService().deleteComment(getUser(user), repository, commentId);
    }

    /**
     * Get issue event for repository
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param eventId    the id of the event
     * @return a {@link IssueEvent}
     * @throws java.io.IOException
     */
    @Processor
    public IssueEvent getIssueEvent(@Optional String user, String repository, long eventId) throws IOException {
        return createIssueService().getIssueEvent(getUser(user), repository, eventId);
    }

    public void setuser(String user) {
        this.user = user;
    }

    public void setUser(@Optional String user) {
        this.user = user;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    private String getUser(@Optional String user) {
        return user != null ? user : this.user;
    }
}