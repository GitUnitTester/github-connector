/**
 * Mule GitHub Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules;

import org.eclipse.egit.github.core.Comment;
import org.eclipse.egit.github.core.CommitComment;
import org.eclipse.egit.github.core.Download;
import org.eclipse.egit.github.core.DownloadResource;
import org.eclipse.egit.github.core.Gist;
import org.eclipse.egit.github.core.GistFile;
import org.eclipse.egit.github.core.Issue;
import org.eclipse.egit.github.core.IssueEvent;
import org.eclipse.egit.github.core.Key;
import org.eclipse.egit.github.core.Label;
import org.eclipse.egit.github.core.Milestone;
import org.eclipse.egit.github.core.Repository;
import org.eclipse.egit.github.core.RepositoryCommit;
import org.eclipse.egit.github.core.RepositoryId;
import org.eclipse.egit.github.core.User;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.display.Password;
import org.mule.api.annotations.display.Placement;
import org.mule.api.annotations.param.Optional;

import java.io.IOException;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Generic module
 *
 * @author MuleSoft, Inc.
 */
@Module(name = "github", schemaVersion = "1.0")
public class GitHubModule {

    /**
     * The user name
     */
    @Configurable
    @Placement(order = 1)
    private String user;
    /**
     * The password
     */
    @Configurable
    @Placement(order = 2)
    @Password
    private String password;

    /**
     * Get a list of {@link Issue} objects that match the specified filter data
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param filterData data to filter issues, if non is specified all issues will be returned
     * @return list of {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public List<Issue> getIssues(@Optional String user, String repository, @Optional Map<String, String> filterData) throws IOException {
        if (filterData == null) {
            filterData = Collections.emptyMap();
        }
        return ServiceFactory.getIssueService(this.user, password).getIssues(getUser(user), repository, filterData);
    }

    /**
     * Custom processor
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repository name
     * @param minutes    minutes
     * @return a list of {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public List<Issue> getIssuesCretedAfter(@Optional String user, String repository, int minutes) throws IOException {
        List<Issue> issues = ServiceFactory.getIssueService(this.user, password).getIssues(getUser(user), repository, Collections.<String, String>emptyMap());
        Iterator<Issue> iterator = issues.iterator();
        Date since = new Date(System.currentTimeMillis() - minutes * 60 * 1000);
        while (iterator.hasNext()) {
            if (since.after(iterator.next().getCreatedAt())) {
                iterator.remove();
            }
        }
        return issues;
    }

    /**
     * Custom processor
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user            the owner of the repository, leave empty to use {@link this#user}
     * @param repository      the repository name
     * @param fromIssueNumber from issue number
     * @return a list of {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public List<Issue> getIssuesSinceNumber(@Optional String user, String repository, int fromIssueNumber) throws IOException {
        List<Issue> issues = ServiceFactory.getIssueService(this.user, password).getIssues(getUser(user), repository, Collections.<String, String>emptyMap());
        Iterator<Issue> iterator = issues.iterator();
        while (iterator.hasNext()) {
            if (fromIssueNumber >= iterator.next().getNumber()) {
                iterator.remove();
            }
        }
        return issues;
    }

    /**
     * Creates a GitHub issue
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repository name
     * @param title      the issues's title
     * @param body       the issuess's body
     * @param assignee   optionally specify a asignee for the issue
     * @return the newly created {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public Issue createIssue(@Optional String user, String repository, String title, String body, @Optional String assignee) throws IOException {
        Issue issue = new Issue();
        issue.setTitle(title);
        issue.setBody(body);
        if (assignee != null) {
            User assigneeUser = new User().setName(assignee);
            issue.setAssignee(assigneeUser);
        }
        return ServiceFactory.getIssueService(this.user, password).createIssue(getUser(user), repository, issue);
    }

    /**
     * Closes a GitHub issue
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repository name
     * @param issueId    the issues's id
     * @return the newly created {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public Issue closeIssue(@Optional String user, String repository, String issueId) throws IOException {
        Issue issue = getIssue(getUser(user), repository, issueId);
        issue.setState("closed");
        return ServiceFactory.getIssueService(this.user, password).editIssue(getUser(user), repository, issue);
    }

    /**
     * Get the issue represented by the given issueId
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param issueId    the id of the issue
     * @return a {@link Issue}
     * @throws java.io.IOException
     */
    @Processor
    public Issue getIssue(@Optional String user, String repository, String issueId) throws IOException {
        return ServiceFactory.getIssueService(this.user, password).getIssue(getUser(user), repository, issueId);
    }

    /**
     * Get an issue's comments
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param issueId    the id of the issue
     * @return a list of {@link Comment}
     * @throws java.io.IOException
     */
    @Processor
    public List<Comment> getComments(@Optional String user, String repository, String issueId) throws IOException {
        return ServiceFactory.getIssueService(this.user, password).getComments(getUser(user), repository, issueId);
    }

    /**
     * Create comment on specified issue id
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param issueId    the issue id
     * @param comment    the text of the comment
     * @return the created {@link Comment}
     * @throws java.io.IOException
     */
    @Processor
    public Comment createComment(@Optional String user, String repository, String issueId, String comment) throws IOException {
        return ServiceFactory.getIssueService(this.user, password).createComment(getUser(user), repository, issueId, comment);
    }

    /**
     * Edits the body of the comment represented by the given comment id
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param commentId  the comment id
     * @param body       the new text of the comment
     * @return the created {@link Comment}
     * @throws java.io.IOException
     */
    @Processor
    public Comment editComment(@Optional String user, String repository, Long commentId, String body) throws IOException {
        Comment comment = ServiceFactory.getIssueService(this.user, password).getComment(getUser(user), repository, commentId);
        comment.setBody(body);
        return ServiceFactory.getIssueService(this.user, password).editComment(getUser(user), repository, comment);
    }

    /**
     * Delete the issue comment with the given id
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param commentId  the id of the comment to delete
     * @throws java.io.IOException
     */
    @Processor
    public void deleteComment(@Optional String user, String repository, String commentId) throws IOException {
        ServiceFactory.getIssueService(this.user, password).deleteComment(getUser(user), repository, commentId);
    }

    /**
     * Get issue event for repository
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the repostory name
     * @param eventId    the id of the event
     * @return a {@link IssueEvent}
     * @throws java.io.IOException
     */
    @Processor
    public IssueEvent getIssueEvent(@Optional String user, String repository, long eventId) throws IOException {
        return ServiceFactory.getIssueService(this.user, password).getIssueEvent(getUser(user), repository, eventId);
    }

    /**
     * Get users watching given repository
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @return non-null but possibly empty list of users
     * @throws IOException
     */
    @Processor
    public List<User> getWatchers(String owner, String name) throws IOException {
        return ServiceFactory.getWatcherService(user, password).getWatchers(RepositoryId.create(owner, name));
    }

    /**
     * Get repositories watched by the given user
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user the user for which the get the watched repositories, leave empty to use {@link this#user}
     * @return non-null but possibly empty list of repositories
     * @throws IOException
     */
    @Processor
    public List<Repository> getWatched(@Optional String user) throws IOException {
        return ServiceFactory.getWatcherService(user, password).getWatched(getUser(user));
    }

    /**
     * Is currently authenticated user watching given repository?
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @return true if watch, false otherwise
     * @throws IOException
     */
    @Processor
    public boolean isWatching(String owner, String name) throws IOException {
        return ServiceFactory.getWatcherService(user, password).isWatching(RepositoryId.create(owner, name));
    }

    /**
     * Add currently authenticated user as a watcher of the given repository
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @throws IOException
     */
    @Processor
    public void watch(String owner, String name) throws IOException {
        ServiceFactory.getWatcherService(user, password).watch(RepositoryId.create(owner, name));
    }

    /**
     * Remove currently authenticated user as a watcher of the given repository
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @throws IOException
     */
    @Processor
    public void unwatch(String owner, String name) throws IOException {
        ServiceFactory.getWatcherService(user, password).unwatch(RepositoryId.create(owner, name));
    }

    /**
     * Returns the list of collaborators of the given repository
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @return non-null but possibly empty list of users
     * @throws IOException
     */
    @Processor
    public List<User> getCollaborators(String owner, String name) throws IOException {
        return ServiceFactory.getCollaboratorService(user, password).getCollaborators(RepositoryId.create(owner, name));
    }

    /**
     * Returns whether the user is a collaborator of the given repository
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param user  the user to consult if it's a collaborator or not, leave empty to use {@link this#user}
     * @return true if the user is a collaborator, false otherwise
     * @throws IOException
     */
    @Processor
    public boolean isCollaborator(String owner, String name, @Optional String user) throws IOException {
        return ServiceFactory.getCollaboratorService(this.user, password).isCollaborator(RepositoryId.create(owner, name), getUser(user));
    }

    /**
     * Adds a collaborator to the given repository
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param user  the user that's going to be added as a collaborator to the given repository, leave empty to use {@link this#user}
     * @throws IOException
     */
    @Processor
    public void addCollaborator(String owner, String name, @Optional String user) throws IOException {
        ServiceFactory.getCollaboratorService(this.user, password).addCollaborator(RepositoryId.create(owner, name), getUser(user));
    }

    /**
     * Removes a collaborator from the given repository
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param user  the user that's going to be removed as a collaborator from the given repository, leave empty to use {@link this#user}
     * @throws IOException
     */
    @Processor
    public void removeCollaborator(String owner, String name, @Optional String user) throws IOException {
        ServiceFactory.getCollaboratorService(this.user, password).removeCollaborator(RepositoryId.create(owner, name), getUser(user));
    }

    /**
     * Returns a list of the commits for a given repository
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @return non-null but possibly empty list of repository commits
     * @throws IOException
     */
    @Processor
    public List<RepositoryCommit> getCommits(String owner, String name) throws IOException {
        return ServiceFactory.getCommitService(user, password).getCommits(RepositoryId.create(owner, name));
    }

    /**
     * Returns all commits in given repository beginning at an optional commit SHA-1
     * and affecting an optional path.
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param sha   an optional Sha or branch to start listing commits from
     * @param path  optional Only commits containing this file path will be returned
     * @return non-null but possibly empty list of repository commits
     * @throws IOException
     */
    @Processor
    public List<RepositoryCommit> getCommitsBySha(String owner, String name, @Optional String sha, @Optional String path) throws IOException {
        return ServiceFactory.getCommitService(user, password).getCommits(RepositoryId.create(owner, name), sha, path);
    }

    /**
     * Returns a commit with given SHA-1 from given repository
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param sha   Sha from comment
     * @return a commit for the given Sha and repository
     * @throws IOException
     */
    @Processor
    public RepositoryCommit getCommit(String owner, String name, String sha) throws IOException {
        return ServiceFactory.getCommitService(user, password).getCommit(RepositoryId.create(owner, name), sha);
    }

    /**
     * Returns all comments on commit with given Sha
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param sha   Sha or branch to start listing commits comments from
     * @return non-null but possibly empty list of commits comments
     * @throws IOException
     */
    @Processor
    public List<CommitComment> getCommmitComments(String owner, String name, String sha) throws IOException {
        return ServiceFactory.getCommitService(user, password).getComments(RepositoryId.create(owner, name), sha);
    }

    /**
     * Returns a comment from commit with the given id
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner     the name of the user that owns the repository
     * @param name      the name of the repository
     * @param commentId id from the comment
     * @return a commit that corresponds to the given id
     * @throws IOException
     */
    @Processor
    public CommitComment getComment(String owner, String name, long commentId) throws IOException {
        return ServiceFactory.getCommitService(user, password).getComment(RepositoryId.create(owner, name), commentId);
    }

    /**
     * Creates a commit comment
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner    the name of the user that owns the repository
     * @param name     the name of the repository
     * @param body     Body of the commit comment
     * @param commitId Sha of the commit to comment on
     * @param line     line number in the file to comment on
     * @param path     relative path of the file to comment on
     * @param position line index in the diff to comment on
     */
    @Processor
    public void addComment(String owner, String name, String body, String commitId, int line, String path, int position) throws IOException {
        CommitComment comment = new CommitComment();
        comment.setCommitId(commitId);
        comment.setLine(line);
        comment.setPath(path);
        comment.setPosition(position);
        comment.setBody(body);

        ServiceFactory.getCommitService(user, password).addComment(RepositoryId.create(owner, name), commitId, comment);
    }

    /**
     * Edits a given comment
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner    the name of the user that owns the repository
     * @param name     the name of the repository
     * @param body     Body of the commit comment
     * @param commitId Sha of the commit to comment on
     * @param line     line number in the file to comment on
     * @param path     relative path of the file to comment on
     * @param position line index in the diff to comment on
     */
    @Processor
    public void editCommitComment(String owner, String name, String body, String commitId, int line, String path, int position) throws IOException {
        CommitComment comment = new CommitComment();
        comment.setCommitId(commitId);
        comment.setLine(line);
        comment.setPath(path);
        comment.setPosition(position);
        comment.setBody(body);

        ServiceFactory.getCommitService(user, password).editComment(RepositoryId.create(owner, name), comment);
    }

    /**
     * Deletes the given comment
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner     the name of the user that owns the repository
     * @param name      the name of the repository
     * @param commentId id from the comment
     * @throws IOException
     */
    @Processor
    public void deleteCommitComment(String owner, String name, long commentId) throws IOException {
        ServiceFactory.getCommitService(user, password).deleteComment(RepositoryId.create(owner, name), commentId);
    }

    /**
     * Returns all deploys keys associated with the given repository
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @return non-null but possibly empty list of keys
     * @throws IOException
     */
    @Processor
    public List<Key> getKeys(String owner, String name) throws IOException {
        return ServiceFactory.getDeployKeyService(user, password).getKeys(RepositoryId.create(owner, name));
    }


    /**
     * Returns the key that corresponds to the given id
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param id    the id of the key
     * @return the key corresponding to the given id
     * @throws IOException
     */
    @Processor
    public Key getKey(String owner, String name, int id) throws IOException {
        return ServiceFactory.getDeployKeyService(user, password).getKey(RepositoryId.create(owner, name), id);
    }


    /**
     * Returns a new deploy key
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param title the title of the key
     * @param key   ssh key
     * @return a new Key created based on the given parameters
     * @throws IOException
     */
    @Processor
    public Key createKey(String owner, String name, String title, String key) throws IOException {
        Key k = new Key();
        k.setTitle(title);
        k.setKey(key);
        return ServiceFactory.getDeployKeyService(user, password).createKey(RepositoryId.create(owner, name), k);
    }

    /**
     * Edits a given deploy key
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param title the title of the key
     * @param key   ssh key
     * @return the modified deploy key
     * @throws IOException
     */
    @Processor
    public Key editKey(String owner, String name, String title, String key) throws IOException {
        Key k = new Key();
        k.setTitle(title);
        k.setKey(key);
        return ServiceFactory.getDeployKeyService(user, password).editKey(RepositoryId.create(owner, name), k);
    }


    /**
     * Deletes a deploy key given the given id
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param id    the id of the deploy key
     * @throws IOException
     */
    @Processor
    public void deleteKey(String owner, String name, int id) throws IOException {
        ServiceFactory.getDeployKeyService(user, password).deleteKey(RepositoryId.create(owner, name), id);
    }

    /**
     * Returns a single download given the provided id
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param id    the id of the download
     * @return the download corresponding to the given id
     * @throws IOException
     */
    @Processor
    public Download getDownload(String owner, String name, int id) throws IOException {
        return ServiceFactory.getDownloadService(user, password).getDownload(RepositoryId.create(owner, name), id);
    }

    /**
     * Deletes a download given the provided id
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner the name of the user that owns the repository
     * @param name  the name of the repository
     * @param id    the id of the download
     * @throws IOException
     */
    @Processor
    public void deleteDownload(String owner, String name, int id) throws IOException {
        ServiceFactory.getDownloadService(user, password).deleteDownload(RepositoryId.create(owner, name), id);
    }

    /**
     * Creates a new download resource
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param owner        the name of the user that owns the repository
     * @param name         the name of the repository
     * @param resourceName the name of the resource
     * @param size         the size of the resource
     * @param description  an optional description
     * @param contentType  an optional content type
     * @return a new download resource
     * @throws IOException
     */
    @Processor
    public DownloadResource createResource(String owner, String name, String resourceName, long size, @Optional String description, @Optional String contentType) throws IOException {
        Download download = new Download();
        download.setName(resourceName);
        download.setSize(size);
        download.setDescription(description);
        download.setContentType(contentType);
        return ServiceFactory.getDownloadService(user, password).createResource(RepositoryId.create(owner, name), download);
    }

    //TODO add upload resource and missing create download methods

    /**
     * Returns the gist according to the given id
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param id id of the wanted gist
     * @return returns the gist according to the provided id
     * @throws IOException
     */
    @Processor
    public Gist getGist(String id) throws IOException {
        return ServiceFactory.getGistService(user, password).getGist(id);
    }

    /**
     * Returns the starred gists for the currently authenticated user
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @return list of starred gists for currently authenticated user
     * @throws IOException
     */
    @Processor
    public List<Gist> getStarredGist() throws IOException {
        return ServiceFactory.getGistService(user, password).getStarredGists();
    }

    /**
     * Returns a list of gists for the specified user
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user user of the gists, leave empty to use {@link this#user}
     * @return a list of gists for the specified user
     * @throws IOException
     */
    @Processor
    public List<Gist> getGists(@Optional String user) throws IOException {
        return ServiceFactory.getGistService(this.user, password).getGists(getUser(user));
    }

    /**
     * Creates a new gist
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param description an optional description of the gist
     * @param isPublic    states whether the gist is public or not
     * @param files       a Map with the gist files
     * @return a new gist
     * @throws IOException
     */
    //@Processor
    //public Gist createGist(@Optional String description, boolean isPublic, Map<String, Map<String, String>> files) throws IOException {
    //    Gist gist = new Gist();
    //    gist.setDescription(description);
    //    gist.setPublic(isPublic);
    //    gist.setFiles(createGistFiles(files));
    //    return ServiceFactory.getGistService(user, password).createGist(gist);
    //}

    /**
     * Updates the given gist
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param gistId      id of the gist to be updated
     * @param description an optional description for the gist
     * @param files       an optional Map of files
     * @return returns the updated gist
     * @throws IOException
     */
    //@Processor
    //public Gist updateGist(String gistId, @Optional String description, @Optional Map<String, Map<String, String>> files) throws IOException {
    //    Gist gist = new Gist();
    //    gist.setId(gistId);
    //    gist.setDescription(description);
    //    gist.setFiles(createGistFiles(files));
    //    return ServiceFactory.getGistService(user, password).updateGist(gist);
    //}

    /**
     * Creates a comment on the specified gist id
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param gistId  id of the gist
     * @param comment comment to create in the gist
     * @return a new comment for the gist
     * @throws IOException
     */
    @Processor
    public Comment createGistComment(String gistId, String comment) throws IOException {
        return ServiceFactory.getGistService(user, password).createComment(gistId, comment);
    }

    /**
     * Returns a list of comments for the given gist
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param gistId id of the gist
     * @return a list with the comments of the given gist
     * @throws IOException
     */
    @Processor
    public List<Comment> getGistComments(String gistId) throws IOException {
        return ServiceFactory.getGistService(user, password).getComments(gistId);
    }

    /**
     * Deletes the given gist
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param gistId id of the gist
     * @throws IOException
     */
    @Processor
    public void deleteGist(String gistId) throws IOException {
        ServiceFactory.getGistService(user, password).deleteGist(gistId);
    }

    /**
     * Returns the comment according to the given id
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param commentId id of the comment to be retrieved
     * @return a comment corresponding to the given id
     * @throws IOException
     */
    @Processor
    public Comment getGistComment(long commentId) throws IOException {
        return ServiceFactory.getGistService(user, password).getComment(commentId);
    }

    /**
     * Deletes the given comment
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param commentId id of the comment
     * @throws IOException
     */
    @Processor
    public void deleteGistComment(long commentId) throws IOException {
        ServiceFactory.getGistService(user, password).deleteComment(commentId);
    }

    /**
     * Updates the given comment
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param commentId id of the comment
     * @param body      new body of the comment
     * @return returns the updated comment
     * @throws IOException
     */
    @Processor
    public Comment editGistComment(long commentId, String body) throws IOException {
        Comment comment = new Comment();
        comment.setId(commentId);
        comment.setBody(body);

        return ServiceFactory.getGistService(user, password).editComment(comment);
    }

    /**
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     * <p/>
     * Star the gist with the given id
     *
     * @param gistId id of the gist to be starred
     * @throws IOException
     */
    @Processor
    public void starGist(String gistId) throws IOException {
        ServiceFactory.getGistService(user, password).starGist(gistId);
    }

    /**
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     * <p/>
     * Unstar the gist with the given id
     *
     * @param gistId id of the gist to be unstarred
     * @throws IOException
     */
    @Processor
    public void unstarGist(String gistId) throws IOException {
        ServiceFactory.getGistService(user, password).unstarGist(gistId);
    }

    /**
     * Returns whether the gist is starred or not
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param gistId id of the gist
     * @return returns true if the gist is starred, false otherwise
     * @throws IOException
     */
    @Processor
    public boolean isStarred(String gistId) throws IOException {
        return ServiceFactory.getGistService(user, password).isStarred(gistId);
    }

    /**
     * Forks the given gist
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param gistId id of the gist to be forked
     * @return returns the forked gist
     * @throws IOException
     */
    @Processor
    public Gist forkGist(String gistId) throws IOException {
        return ServiceFactory.getGistService(user, password).forkGist(gistId);
    }

    /**
     * Returns a list of labels for the given repository and user
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the name of the repository
     * @return a list of labels for the given repository and user
     * @throws IOException
     */
    @Processor
    public List<Label> getLabels(@Optional String user, String repository) throws IOException {
        return ServiceFactory.getLabelService(this.user, password).getLabels(getUser(user), repository);
    }

    /**
     * Returns a single label
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the name of the repository
     * @param label      the label id
     * @return the label associated to the given id
     * @throws IOException
     */
    @Processor
    public Label getLabel(@Optional String user, String repository, String label) throws IOException {
        return ServiceFactory.getLabelService(this.user, password).getLabel(getUser(user), repository, label);
    }

    /**
     * Deletes the given label
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the name of the repository
     * @param label      the label id
     * @throws IOException
     */
    @Processor
    public void deleteLabel(@Optional String user, String repository, String label) throws IOException {
        ServiceFactory.getLabelService(this.user, password).deleteLabel(getUser(user), repository, label);
    }

    /**
     * Creates a new label
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the name of the repository
     * @param name       the name of the label
     * @param color      the color of the label, a 6 character hex code, without a leading #
     * @return returns a new Label
     * @throws IOException
     */
    @Processor
    public Label createLabel(@Optional String user, String repository, String name, String color) throws IOException {
        Label label = new Label();
        label.setName(name);
        label.setColor(color);

        return ServiceFactory.getLabelService(this.user, password).createLabel(getUser(user), repository, label);
    }

    // TODO add set labels method

    /**
     * Returns a list of milestones for the given repository
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the name of the repository
     * @param state      state of the milestone, open or closed
     * @return s list of milestones for the given repository
     * @throws IOException
     */
    @Processor
    public List<Milestone> getMilestones(@Optional String user, String repository, String state) throws IOException {
        return ServiceFactory.getMilestoneService(this.user, password).getMilestones(getUser(user), repository, state);
    }


    /**
     * Returns a single milestone
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the name of the repository
     * @param number     milestone number
     * @return returns a single milestone
     * @throws IOException
     */
    @Processor
    public Milestone getMilestone(@Optional String user, String repository, String number) throws IOException {
        return ServiceFactory.getMilestoneService(this.user, password).getMilestone(getUser(user), repository, number);
    }


    /**
     * Deletes a given milestone
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user       the owner of the repository, leave empty to use {@link this#user}
     * @param repository the name of the repository
     * @param number     number of the milestone
     * @throws IOException
     */
    @Processor
    public void deleteMilestone(@Optional String user, String repository, String number) throws IOException {
        ServiceFactory.getMilestoneService(this.user, password).deleteMilestone(getUser(user), repository, number);
    }

    /**
     * Creates a new milestone
     * </p>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user        the owner of the repository, leave empty to use {@link this#user}
     * @param repository  the name of the repository
     * @param title       the title of the milestone
     * @param state       the state of the milestone, open or closed,  by default is open
     * @param description the description of the milestone
     * @param dueOn       when the milestone is due
     * @return a new milestone with the given parameters
     * @throws IOException
     */
    @Processor
    public Milestone createMilestone(@Optional String user, String repository, String title, @Optional String state,
                                     @Optional String description, @Optional Date dueOn) throws IOException {
        Milestone milestone = new Milestone();
        milestone.setTitle(title);
        milestone.setState(state);
        milestone.setDueOn(dueOn);
        milestone.setDescription(description);

        return ServiceFactory.getMilestoneService(this.user, password).createMilestone(getUser(user), repository, milestone);
    }

    /**
     * Get user with given login name
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param loginName the login name of the user to look up
     * @return a {@link User} instance
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/">Get a single user</a>
     */
    @Processor
    public User getUserByLoginName(String loginName) throws IOException {
        return ServiceFactory.getUserService(this.user, password).getUser(loginName);
    }

    /**
     * Get the currently authenticated user
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @return a {@link User} instance representing the current user
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/">Get the authenticated user</a>
     */
    @Processor
    public User getCurrentUser() throws IOException {
        return ServiceFactory.getUserService(this.user, password).getUser();
    }

    /**
     * Updates the currently authenticated user using the given attributes. Only provide values for the attributes
     * you want to change.
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param name     a the name for the current user
     * @param email    a publicly visibile email address for the current user
     * @param blog     a blog for the current user
     * @param company  a company for the current user
     * @param location a location for the current user
     * @param hireable whether the current user is hireable
     * @return a {@link User} instance representing the current user
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/">Update the authenticated user</a>
     */
    @Processor
    public User updateCurrentUser(@Optional String name, @Optional String email, @Optional String blog, @Optional String company,
                                  @Optional String location, @Optional Boolean hireable) throws IOException {
        User currentUser = getCurrentUser();
        if (name != null) {
            currentUser.setName(name);
        }
        if (email != null) {
            currentUser.setEmail(email);
        }
        if (blog != null) {
            currentUser.setBlog(blog);
        }
        if (company != null) {
            currentUser.setCompany(company);
        }
        if (location != null) {
            currentUser.setLocation(location);
        }
        if (hireable != null) {
            currentUser.setHireable(hireable);
        }
        return ServiceFactory.getUserService(this.user, password).editUser(currentUser);
    }

    /**
     * Returns a list of followers for given user, if no one is provided the current authenticated user will be used
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user the user for which to get the followers, leave empty to use current user
     * @return a collection of {@link User} that follow the current user
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/followers/">List followers of a user</a>
     */
    @Processor
    public List<User> getFollowers(@Optional String user) throws IOException {
        return ServiceFactory.getUserService(this.user, password).getFollowers(getUser(user));
    }

    /**
     * Returns a list users following the given user, if no one is provided the current authenticated user will be used
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user the user for which to get who is following, leave empty to use current user
     * @return a collection of {@link User} the user is following
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/followers/">List users following another user</a>
     */
    @Processor
    public List<User> getFollowing(@Optional String user) throws IOException {
        return ServiceFactory.getUserService(this.user, password).getFollowing(getUser(user));
    }

    /**
     * Returns wether the authenticated user is following the given user
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user the user to check
     * @return wether the authenticated user is following the given user
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/followers/">Check if you are following a user</a>
     */
    @Processor
    public boolean isFollowing(String user) throws IOException {
        return ServiceFactory.getUserService(this.user, password).isFollowing(user);
    }

    /**
     * Make the currently authenticated user follow the given user
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user the user to follow
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/followers/">Follow a user</a>
     */
    @Processor
    public void follow(String user) throws IOException {
        ServiceFactory.getUserService(this.user, password).follow(user);
    }

    /**
     * Make the currently authenticated user unfollow the given user
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param user the user to unfollow
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/followers/">Unfollow a user</a>
     */
    @Processor
    public void unfollow(String user) throws IOException {
        ServiceFactory.getUserService(this.user, password).unfollow(user);
    }

    /**
     * Get all e-mail addresses for the currently authenticated user
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @return list of e-mail address
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/emails/">List email addresses for a user</a>
     */
    @Processor
    public List<String> getEmails() throws IOException {
        return ServiceFactory.getUserService(this.user, password).getEmails();
    }

    /**
     * Add one or more e-mail addresses to the currently authenticated user's account
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param emails the email addresses to add
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/emails/">Add email address(es)</a>
     */
    @Processor
    public void addEmails(List<String> emails) throws IOException {
        ServiceFactory.getUserService(this.user, password).addEmail(emails.toArray(new String[emails.size()]));
    }

    /**
     * Removes one or more e-mail addresses to the currently authenticated user's account
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param emails the email addresses to add
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/emails/">Delete email address(es)</a>
     */
    @Processor
    public void removeEmails(List<String> emails) throws IOException {
        ServiceFactory.getUserService(this.user, password).removeEmail(emails.toArray(new String[emails.size()]));
    }

    /**
     * Get all public keys for currently authenticated user
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @return non-null list of {@link Key}
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/keys/">List public keys for a user</a>
     */
    @Processor
    public List<Key> getKeys() throws IOException {
        return ServiceFactory.getUserService(this.user, password).getKeys();
    }

    /**
     * Get key with given id
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param id the id of the key of obtain
     * @return a {@link Key} instance
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/keys/">Get a single public key</a>
     */
    @Processor
    public Key getKey(int id) throws IOException {
        return ServiceFactory.getUserService(this.user, password).getKey(id);
    }

    /**
     * Create key for currently authenticated user
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param title the title of the new key
     * @param key   the new key
     * @return the created {@link Key}
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/keys/">Create a public key</a>
     */
    @Processor
    public Key createKey(String title, String key) throws IOException {
        Key newKey = new Key();
        newKey.setTitle(title);
        newKey.setKey(key);
        return ServiceFactory.getUserService(this.user, password).createKey(newKey);
    }

    /**
     * Edit key for currently authenticated user
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param keyId the id of the key to edit
     * @param title a new title for the key
     * @param key   a new key
     * @return edited {@link Key}
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/keys/">Update a public key</a>
     */
    @Processor
    public Key editKey(int keyId, @Optional String title, @Optional String key) throws IOException {
        Key keyToEdit = getKey(keyId);
        if (title != null) {
            keyToEdit.setTitle(title);
        }
        if (key != null) {
            keyToEdit.setKey(key);
        }
        return ServiceFactory.getUserService(this.user, password).editKey(keyToEdit);
    }

    /**
     * Delete key with given id
     * <p/>
     * {@sample.xml ../../../doc/GitHub-connector.xml.sample github:my-processor}
     *
     * @param id the id of the key to delete
     * @throws IOException
     * @api.doc <a href="http://developer.github.com/v3/users/keys/">Delete a public key</a>
     */
    @Processor
    public void deleteKey(int id) throws IOException {
        ServiceFactory.getUserService(this.user, password).deleteKey(id);
    }

    private Map<String, GistFile> createGistFiles(Map<String, Map<String, String>> files) {
        Map<String, GistFile> gistFiles = new HashMap<String, GistFile>();
        for (String fileName : files.keySet()) {
            Map<String, String> values = files.get(fileName);
            GistFile gistFile = new GistFile();
            gistFile.setFilename(fileName);
            String content = values.get("content");
            if (content != null) {
                gistFile.setContent(content);
            }
            String size = values.get("size");
            if (size != null) {
                gistFile.setSize(Integer.valueOf(size));
            }
            String rawUrl = values.get("raw_url");
            if (rawUrl != null) {
                gistFile.setRawUrl(rawUrl);
            }
            gistFiles.put(fileName, gistFile);
        }
        return gistFiles;
    }


    public void setuser(String user) {
        this.user = user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    private String getUser(String user) {
        return user != null ? user : this.user;
    }
}