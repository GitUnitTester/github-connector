/**
 * Mule GitHub Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules;

import org.eclipse.egit.github.core.Issue;
import org.eclipse.egit.github.core.service.IssueService;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class GitHubModuleTest {

    private static final String REPOSITORY = "myRepo";
    private static final String USER = "pepe";
    private static final String ISSUE_ID = "321";
    @Mock
    private IssueService issueService;
    @Mock
    private Issue issue1;
    @Mock
    private Issue issue2;
    @Captor
    private ArgumentCaptor<Issue> issueCaptor;

    private Map<String, String> filterData = new HashMap<String, String>(1);
    private GitHubModule gitHubModule;

    @Before
    public void setUpTests() {
        MockitoAnnotations.initMocks(this);
        ServiceFactory.setDefaultIssueService(issueService);
        filterData = new HashMap<String, String>(1);
        filterData.put("status", "closed");
        gitHubModule = new GitHubModule();
    }

    @Test
    public void getIssues() throws Exception {
        List<Issue> issues = createList(issue1, issue2);
        when(issueService.getIssues(USER, REPOSITORY, filterData)).thenReturn(issues);
        assertEquals(issues, gitHubModule.getIssues(USER, REPOSITORY, filterData));
    }

    @Test
    public void getIssuesCretedAfter() throws Exception {
        List<Issue> issues = createList(issue1, issue2);
        when(issueService.getIssues(USER, REPOSITORY, Collections.<String, String>emptyMap())).thenReturn(issues);
        when(issue1.getCreatedAt()).thenReturn(new Date(System.currentTimeMillis() - 10 * 1000 * 60));
        when(issue2.getCreatedAt()).thenReturn(new Date());
        assertEquals(Arrays.asList(issue2), gitHubModule.getIssuesCretedAfter(USER, REPOSITORY, 1));
    }

    @Test
    public void getIssuesSinceNumber() throws Exception {
        List<Issue> issues = createList(issue1, issue2);
        when(issueService.getIssues(USER, REPOSITORY, Collections.<String, String>emptyMap())).thenReturn(issues);
        when(issue1.getNumber()).thenReturn(5);
        when(issue2.getNumber()).thenReturn(15);
        assertEquals(Arrays.asList(issue2), gitHubModule.getIssuesSinceNumber(USER, REPOSITORY, 10));
    }

    @Test
    public void createIssue() throws Exception {
        gitHubModule.createIssue(USER, REPOSITORY, "issue title", "issue body", "coco");
        verify(issueService).createIssue(eq(USER), eq(REPOSITORY), issueCaptor.capture());
        Issue issueSentToGitHub = issueCaptor.getValue();
        assertEquals("issue title", issueSentToGitHub.getTitle());
        assertEquals("issue body", issueSentToGitHub.getBody());
        assertEquals("coco", issueSentToGitHub.getAssignee().getName());
    }

    @Test
    public void closeIssue() throws Exception {
        GitHubModule gitHubModuleSpy = spy(gitHubModule);
        when(gitHubModuleSpy.getIssue(USER, REPOSITORY, ISSUE_ID)).thenReturn(issue1);
        gitHubModule.closeIssue(USER, REPOSITORY, ISSUE_ID);
        verify(issueService).editIssue(USER, REPOSITORY, issue1);
        verify(issue1).setState("closed");
    }

    @Test
    public void getIssue() throws Exception {
        when(issueService.getIssue(USER, REPOSITORY, ISSUE_ID)).thenReturn(issue1);
        assertEquals(issue1, gitHubModule.getIssue(USER, REPOSITORY, ISSUE_ID));
        verify(issueService).getIssue(USER, REPOSITORY, ISSUE_ID);
    }

    private <T> List<T> createList(T... elements) {
        List<T> result = new ArrayList<T>(elements.length);
        Collections.addAll(result, elements);
        return result;
    }
}